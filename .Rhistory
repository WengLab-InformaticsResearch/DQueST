conceptAncestor = tbl(con,'concept_ancestor')
conceptAncestorHighQuality = conceptAncestor %>%
filter(ancestor_concept_id %in% highQualityOmopId) %>%
collect()
conceptMappingAncestor = conceptMappingSum %>%
left_join(conceptAncestorHighQuality,
by = c("omop_id" = "descendant_concept_id")) %>%
filter(max_levels_of_separation < levels_of_separation) %>%
rename(mapping_score1 = scoreSum) %>%
select(omop_id, mapping_score1, ancestor_concept_id) %>%
left_join(conceptMappingSum, by = c("ancestor_concept_id" = "omop_id")) %>%
rename(mapping_score2 = scoreSum) %>%
select(omop_id, mapping_score1, ancestor_concept_id, mapping_score2) %>%
group_by(omop_id) %>%
filter((
mapping_score1 < low_count_threshold &
mapping_score2 == max(mapping_score2)
) |
(
mapping_score1 >= low_count_threshold &
omop_id == ancestor_concept_id
)
) %>%
rename(common_omop_id = ancestor_concept_id) %>%
rename(mapping_score = mapping_score1) %>%
select(omop_id, mapping_score, common_omop_id)
return(conceptMappingAncestor)
}
conceptMappingAncestor = conceptCluster(conceptMapping = conceptMapping,mapping_threshold = 0.8,levels_of_separation = 3)
conceptMappingAncestor
conceptMappingAncestor %>% pull(common_omop_id) %>% unique() %>% length()
conceptCluster = function(conceptMapping,mapping_threshold = 0.8,levels_of_separation = 2,low_count_threshold = 1){
conceptMappingHighQuality = conceptMapping[mapping_score > mapping_threshold]
conceptMappingSum = conceptMappingHighQuality[,.(scoreSum=sum(mapping_score)),by=omop_id]
highQualityOmopId = conceptMappingSum %>% pull(omop_id) %>% unique()
source('ohdsiConnection.R')
con = ohdsiConnection()
conceptAncestor = tbl(con,'concept_ancestor')
conceptAncestorHighQuality = conceptAncestor %>%
filter(ancestor_concept_id %in% highQualityOmopId) %>%
collect()
conceptMappingAncestor = conceptMappingSum %>%
left_join(conceptAncestorHighQuality,
by = c("omop_id" = "descendant_concept_id")) %>%
filter(max_levels_of_separation < levels_of_separation) %>%
rename(mapping_score1 = scoreSum) %>%
select(omop_id, mapping_score1, ancestor_concept_id) %>%
left_join(conceptMappingSum, by = c("ancestor_concept_id" = "omop_id")) %>%
rename(mapping_score2 = scoreSum) %>%
select(omop_id, mapping_score1, ancestor_concept_id, mapping_score2) %>%
group_by(omop_id) %>%
filter((
mapping_score1 < low_count_threshold &
mapping_score2 == max(mapping_score2)
) |
(
mapping_score1 >= low_count_threshold &
omop_id == ancestor_concept_id
)
) %>%
rename(common_omop_id = ancestor_concept_id) %>%
rename(mapping_score = mapping_score1) %>%
select(omop_id, mapping_score, common_omop_id)
return(conceptMappingAncestor)
}
conceptMappingAncestor = conceptCluster(conceptMapping = conceptMapping)
conceptMappingAncestor
conceptMappingAncestor %>% pull(common_omop_id) %>% unique() %>% length()
conceptCluster = function(conceptMapping,mapping_threshold = 0.8,levels_of_separation = 2,low_count_threshold = 1){
conceptMappingHighQuality = conceptMapping[mapping_score > mapping_threshold]
conceptMappingSum = conceptMappingHighQuality[,.(scoreSum=sum(mapping_score)),by=omop_id]
highQualityOmopId = conceptMappingSum %>% pull(omop_id) %>% unique()
source('ohdsiConnection.R')
con = ohdsiConnection()
conceptAncestor = tbl(con,'concept_ancestor')
conceptAncestorHighQuality = conceptAncestor %>%
filter(ancestor_concept_id %in% highQualityOmopId) %>%
collect()
conceptMappingAncestor = conceptMappingSum %>%
left_join(conceptAncestorHighQuality,
by = c("omop_id" = "descendant_concept_id")) %>%
filter(max_levels_of_separation < levels_of_separation) %>%
rename(mapping_score_sum_1 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id) %>%
left_join(conceptMappingSum, by = c("ancestor_concept_id" = "omop_id")) %>%
rename(mapping_score_sum_2 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id, mapping_score_sum_2) %>%
group_by(omop_id) %>%
filter((
mapping_score_sum_1 < low_count_threshold &
mapping_score_sum_2 == max(mapping_score_sum_2)
) |
(
mapping_score_sum_1 >= low_count_threshold &
omop_id == ancestor_concept_id
)
) %>%
rename(common_omop_id = ancestor_concept_id) %>%
rename(mapping_score_sum = mapping_score_sum_1) %>%
select(omop_id, mapping_score_sum, common_omop_id)
return(conceptMappingAncestor)
}
conceptMappingAncestor = conceptCluster(conceptMapping = conceptMapping)
conceptMappingAncestor
write.csv(x = conceptMapping,file = "../resource/concept_cluster_result.csv")
write.csv(x = conceptMappingAncestor,file = "../resource/concept_cluster_result.csv")
write.csv(x = conceptMappingAncestor,file = "../resource/concept_cluster_result.csv",col.names = T,row.names = F)
write.csv(x = conceptMappingAncestor,file = "../resource/concept_cluster_result.csv",row.names = F)
library(data.table)
library(dplyr)
dt = fread(file = 'resource/alltresults_c3.txt',sep = "\t",header = F,stringsAsFactors = F,fill = T,showProgress = T)
colnames(dt) = c('nct_id','ie_flag','term','domain','negation','temporal','value')
# change domain to lower case.
dt[,':='(domain=tolower(domain))]
# change term to lower case.
dt[,':='(term=tolower(term))]
# change ie_flag to 1/0
dt[,':='(ie_flag=(ie_flag=='INC'))]
dt[,':='(ie_flag=as.numeric(ie_flag))]
# change negation to 1/0
dt[,':='(negation=as.numeric(negation))]
dt[,':='(ie_flag=xor(ie_flag,negation))]
dt[,':='(ie_flag=as.numeric(ie_flag))]
dt[,'negation':=NULL] # drop negation.
library(data.table)
library(dplyr)
dt = fread(file = '../resource/alltresults_c3.txt',sep = "\t",header = F,stringsAsFactors = F,fill = T,showProgress = T)
colnames(dt) = c('nct_id','ie_flag','term','domain','negation','temporal','value')
# change domain to lower case.
dt[,':='(domain=tolower(domain))]
# change term to lower case.
dt[,':='(term=tolower(term))]
# change ie_flag to 1/0
dt[,':='(ie_flag=(ie_flag=='INC'))]
dt[,':='(ie_flag=as.numeric(ie_flag))]
# change negation to 1/0
dt[,':='(negation=as.numeric(negation))]
dt[,':='(ie_flag=xor(ie_flag,negation))]
dt[,':='(ie_flag=as.numeric(ie_flag))]
dt[,'negation':=NULL] # drop negation.
dt = fread(file = '../resource/alltresults_c3.txt',sep = "\t",header = F,stringsAsFactors = F,fill = T,showProgress = T)
setwd("~/Project/eqacts/tools")
dt = fread(file = '../resource/alltresults_c3.txt',sep = "\t",header = F,stringsAsFactors = F,fill = T,showProgress = T)
dt = fread(file = '../resource/ec_parsed_matrix.txt',sep = "\t",header = F,stringsAsFactors = F,fill = T,showProgress = T)
dt
colnames(dt) = c('nct_id','ie_flag','term','domain','negation','temporal','value')
# change domain to lower case.
dt[,':='(domain=tolower(domain))]
# change term to lower case.
dt[,':='(term=tolower(term))]
# change ie_flag to 1/0
dt[,':='(ie_flag=(ie_flag=='INC'))]
dt[,':='(ie_flag=as.numeric(ie_flag))]
# change negation to 1/0
dt[,':='(negation=as.numeric(negation))]
dt[,':='(ie_flag=xor(ie_flag,negation))]
dt[,':='(ie_flag=as.numeric(ie_flag))]
dt[,'negation':=NULL] # drop negation.
dt
dt = fread(file = '../resource/ec_parsed_matrix.txt',sep = "\t",
header = F,stringsAsFactors = F,
fill = T,showProgress = T,
na.strings = c("no_temporal","no_value"))
colnames(dt) = c('nct_id','ie_flag','term','domain','negation','temporal','value')
# change domain to lower case.
dt[,':='(domain=tolower(domain))]
# change term to lower case.
dt[,':='(term=tolower(term))]
# change ie_flag to 1/0
dt[,':='(ie_flag=(ie_flag=='INC'))]
dt[,':='(ie_flag=as.numeric(ie_flag))]
# change negation to 1/0
dt[,':='(negation=as.numeric(negation))]
dt[,':='(ie_flag=xor(ie_flag,negation))]
dt[,':='(ie_flag=as.numeric(ie_flag))]
dt[,'negation':=NULL] # drop negation.
dt
dt %>% pull(value)
dt %>% filter(!is.na(value)) %>% pull(value)
setwd("~/Project/eqacts/tools")
dt = fread(file = '../resource/concept_mapping_result_v2.txt',sep = "\t",
header = F,stringsAsFactors = F,
fill = T,showProgress = T,
na.strings = c("no_temporal","no_value"))
library(data.table)
library(dplyr)
dt = fread(file = '../resource/concept_mapping_result_v2.txt',sep = "\t",
header = F,stringsAsFactors = F,
fill = T,showProgress = T,
na.strings = c("no_temporal","no_value"))
dt
summary(dt$V3)
library(data.table)
library(dplyr)
dt = fread(file = '../resource/ec_parsed_matrix.txt',sep = "\t",
header = F,stringsAsFactors = F,
fill = T,showProgress = T,
na.strings = c("no_temporal","no_value"))
colnames(dt) = c('nct_id','ie_flag','term','domain','negation','temporal','value')
# change domain to lower case.
dt[,':='(domain=tolower(domain))]
# change term to lower case.
dt[,':='(term=tolower(term))]
# change ie_flag to 1/0
dt[,':='(ie_flag=(ie_flag=='INC'))]
dt[,':='(ie_flag=as.numeric(ie_flag))]
# change negation to 1/0
dt[,':='(negation=as.numeric(negation))]
dt[,':='(ie_flag=xor(ie_flag,negation))]
dt[,':='(ie_flag=as.numeric(ie_flag))]
dt[,'negation':=NULL] # drop negation.
dt
dt$temporal
dt$temporal[!is.na(dt$temporal)]
library(data.table)
library(dplyr)
library(dbplyr)
conceptMapping = fread(file = '../resource/concept_mapping_result_v2.txt',sep = "\t",header = F,fill = T,stringsAsFactors = F,data.table = T,nThread = 4)
colnames(conceptMapping) = c('term','mapping_term','mapping_score','omop_id')
# term is the original term
# mapping_term is the term mapped in concept_synonym table (could be non-standard)
# mapping_score is string based usagi mapping_score
# omop_id is the standard concept id
conceptCluster = function(conceptMapping,mapping_threshold = 0.8,levels_of_separation = 2,low_count_threshold = 1){
conceptMappingHighQuality = conceptMapping[mapping_score > mapping_threshold]
conceptMappingSum = conceptMappingHighQuality[,.(scoreSum=sum(mapping_score)),by=omop_id]
highQualityOmopId = conceptMappingSum %>% pull(omop_id) %>% unique()
source('ohdsiConnection.R')
con = ohdsiConnection()
conceptAncestor = tbl(con,'concept_ancestor')
conceptAncestorHighQuality = conceptAncestor %>%
filter(ancestor_concept_id %in% highQualityOmopId) %>%
collect()
conceptMappingAncestor = conceptMappingSum %>%
left_join(conceptAncestorHighQuality,
by = c("omop_id" = "descendant_concept_id")) %>%
filter(max_levels_of_separation < levels_of_separation) %>%
rename(mapping_score_sum_1 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id) %>%
left_join(conceptMappingSum, by = c("ancestor_concept_id" = "omop_id")) %>%
rename(mapping_score_sum_2 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id, mapping_score_sum_2) %>%
group_by(omop_id) %>%
filter((
mapping_score_sum_1 < low_count_threshold &
mapping_score_sum_2 == max(mapping_score_sum_2)
) |
(
mapping_score_sum_1 >= low_count_threshold &
omop_id == ancestor_concept_id
)
) %>%
rename(common_omop_id = ancestor_concept_id) %>%
rename(mapping_score_sum = mapping_score_sum_1) %>%
select(omop_id, mapping_score_sum, common_omop_id)
return(conceptMappingAncestor)
}
conceptMappingAncestor = conceptCluster(conceptMapping = conceptMapping)
conceptMappingAncestor
conceptMappingAncestor %>% arrange(-mapping_score_sum)
conceptCluster = function(conceptMapping,mapping_threshold = 0.8,levels_of_separation = 2,low_count_threshold = 10){
conceptMappingHighQuality = conceptMapping[mapping_score > mapping_threshold]
conceptMappingSum = conceptMappingHighQuality[,.(scoreSum=sum(mapping_score)),by=omop_id]
highQualityOmopId = conceptMappingSum %>% pull(omop_id) %>% unique()
source('ohdsiConnection.R')
con = ohdsiConnection()
conceptAncestor = tbl(con,'concept_ancestor')
conceptAncestorHighQuality = conceptAncestor %>%
filter(ancestor_concept_id %in% highQualityOmopId) %>%
collect()
conceptMappingAncestor = conceptMappingSum %>%
left_join(conceptAncestorHighQuality,
by = c("omop_id" = "descendant_concept_id")) %>%
filter(max_levels_of_separation < levels_of_separation) %>%
rename(mapping_score_sum_1 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id) %>%
left_join(conceptMappingSum, by = c("ancestor_concept_id" = "omop_id")) %>%
rename(mapping_score_sum_2 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id, mapping_score_sum_2) %>%
group_by(omop_id) %>%
filter((
mapping_score_sum_1 < low_count_threshold &
mapping_score_sum_2 == max(mapping_score_sum_2)
) |
(
mapping_score_sum_1 >= low_count_threshold &
omop_id == ancestor_concept_id
)
) %>%
rename(common_omop_id = ancestor_concept_id) %>%
rename(mapping_score_sum = mapping_score_sum_1) %>%
select(omop_id, mapping_score_sum, common_omop_id)
return(conceptMappingAncestor)
}
conceptMappingAncestor = conceptCluster(conceptMapping = conceptMapping)
library(data.table)
library(dplyr)
library(dbplyr)
conceptMapping = fread(file = '../resource/concept_mapping_result_v2.txt',sep = "\t",header = F,fill = T,stringsAsFactors = F,data.table = T,nThread = 4)
colnames(conceptMapping) = c('term','mapping_term','mapping_score','omop_id')
# term is the original term
# mapping_term is the term mapped in concept_synonym table (could be non-standard)
# mapping_score is string based usagi mapping_score
# omop_id is the standard concept id
conceptCluster = function(conceptMapping,mapping_threshold = 0.8,levels_of_separation = 2,low_count_threshold = 10){
conceptMappingHighQuality = conceptMapping[mapping_score > mapping_threshold]
conceptMappingSum = conceptMappingHighQuality[,.(scoreSum=sum(mapping_score)),by=omop_id]
highQualityOmopId = conceptMappingSum %>% pull(omop_id) %>% unique()
source('ohdsiConnection.R')
con = ohdsiConnection()
conceptAncestor = tbl(con,'concept_ancestor')
conceptAncestorHighQuality = conceptAncestor %>%
filter(ancestor_concept_id %in% highQualityOmopId) %>%
collect()
conceptMappingAncestor = conceptMappingSum %>%
left_join(conceptAncestorHighQuality,
by = c("omop_id" = "descendant_concept_id")) %>%
filter(max_levels_of_separation < levels_of_separation) %>%
rename(mapping_score_sum_1 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id) %>%
left_join(conceptMappingSum, by = c("ancestor_concept_id" = "omop_id")) %>%
rename(mapping_score_sum_2 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id, mapping_score_sum_2) %>%
group_by(omop_id) %>%
filter((
mapping_score_sum_1 < low_count_threshold &
mapping_score_sum_2 == max(mapping_score_sum_2)
) |
(
mapping_score_sum_1 >= low_count_threshold &
omop_id == ancestor_concept_id
)
) %>%
rename(common_omop_id = ancestor_concept_id) %>%
rename(mapping_score_sum = mapping_score_sum_1) %>%
select(omop_id, mapping_score_sum, common_omop_id)
return(conceptMappingAncestor)
}
conceptMappingAncestor = conceptCluster(conceptMapping = conceptMapping)
setwd("~/Project/eqacts/tools")
library(data.table)
library(dplyr)
library(dbplyr)
conceptMapping = fread(file = '../resource/concept_mapping_result_v2.txt',sep = "\t",header = F,fill = T,stringsAsFactors = F,data.table = T,nThread = 4)
colnames(conceptMapping) = c('term','mapping_term','mapping_score','omop_id')
# term is the original term
# mapping_term is the term mapped in concept_synonym table (could be non-standard)
# mapping_score is string based usagi mapping_score
# omop_id is the standard concept id
conceptCluster = function(conceptMapping,mapping_threshold = 0.8,levels_of_separation = 2,low_count_threshold = 10){
conceptMappingHighQuality = conceptMapping[mapping_score > mapping_threshold]
conceptMappingSum = conceptMappingHighQuality[,.(scoreSum=sum(mapping_score)),by=omop_id]
highQualityOmopId = conceptMappingSum %>% pull(omop_id) %>% unique()
source('ohdsiConnection.R')
con = ohdsiConnection()
conceptAncestor = tbl(con,'concept_ancestor')
conceptAncestorHighQuality = conceptAncestor %>%
filter(ancestor_concept_id %in% highQualityOmopId) %>%
collect()
conceptMappingAncestor = conceptMappingSum %>%
left_join(conceptAncestorHighQuality,
by = c("omop_id" = "descendant_concept_id")) %>%
filter(max_levels_of_separation < levels_of_separation) %>%
rename(mapping_score_sum_1 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id) %>%
left_join(conceptMappingSum, by = c("ancestor_concept_id" = "omop_id")) %>%
rename(mapping_score_sum_2 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id, mapping_score_sum_2) %>%
group_by(omop_id) %>%
filter((
mapping_score_sum_1 < low_count_threshold &
mapping_score_sum_2 == max(mapping_score_sum_2)
) |
(
mapping_score_sum_1 >= low_count_threshold &
omop_id == ancestor_concept_id
)
) %>%
rename(common_omop_id = ancestor_concept_id) %>%
rename(mapping_score_sum = mapping_score_sum_1) %>%
select(omop_id, mapping_score_sum, common_omop_id)
return(conceptMappingAncestor)
}
conceptMappingAncestor = conceptCluster(conceptMapping = conceptMapping)
conceptMappingAncestor
conceptMappingAncestor[common_omop_id=='4274025']
conceptMappingAncestor %>% filter(common_omop_id=='4274025')
conceptCluster = function(conceptMapping,mapping_threshold = 0.7,levels_of_separation = 2,low_count_threshold = 5){
conceptMappingHighQuality = conceptMapping[mapping_score > mapping_threshold]
conceptMappingSum = conceptMappingHighQuality[,.(scoreSum=sum(mapping_score)),by=omop_id]
highQualityOmopId = conceptMappingSum %>% pull(omop_id) %>% unique()
source('ohdsiConnection.R')
con = ohdsiConnection()
conceptAncestor = tbl(con,'concept_ancestor')
conceptAncestorHighQuality = conceptAncestor %>%
filter(ancestor_concept_id %in% highQualityOmopId) %>%
collect()
conceptMappingAncestor = conceptMappingSum %>%
left_join(conceptAncestorHighQuality,
by = c("omop_id" = "descendant_concept_id")) %>%
filter(max_levels_of_separation < levels_of_separation) %>%
rename(mapping_score_sum_1 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id) %>%
left_join(conceptMappingSum, by = c("ancestor_concept_id" = "omop_id")) %>%
rename(mapping_score_sum_2 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id, mapping_score_sum_2) %>%
group_by(omop_id) %>%
filter((
mapping_score_sum_1 < low_count_threshold &
mapping_score_sum_2 == max(mapping_score_sum_2)
) |
(
mapping_score_sum_1 >= low_count_threshold &
omop_id == ancestor_concept_id
)
) %>%
rename(common_omop_id = ancestor_concept_id) %>%
rename(mapping_score_sum = mapping_score_sum_1) %>%
select(omop_id, mapping_score_sum, common_omop_id)
return(conceptMappingAncestor)
}
conceptMappingAncestor = conceptCluster(conceptMapping = conceptMapping)
conceptMappingAncestor %>% filter(common_omop_id=='4274025')
# term is the original term
# mapping_term is the term mapped in concept_synonym table (could be non-standard)
# mapping_score is string based usagi mapping_score
# omop_id is the standard concept id
HighLevelConceptId = read.csv("../resource/high_level_id.csv")
HighLevelConceptId
HighLevelConceptId = read.csv("../resource/high_level_id.csv",header = F)
HighLevelConceptId
HighLevelConceptId = read.csv("../resource/high_level_id.csv",header = F)
HighLevelConceptId = HighLevelConceptId$V1
conceptCluster = function(conceptMapping,mapping_threshold = 0.7,levels_of_separation = 2,low_count_threshold = 5, abstract_id = HighLevelConceptId){
conceptMappingHighQuality = conceptMapping[mapping_score > mapping_threshold]
conceptMappingSum = conceptMappingHighQuality[,.(scoreSum=sum(mapping_score)),by=omop_id]
highQualityOmopId = conceptMappingSum %>% pull(omop_id) %>% unique()
highQualityOmopId = highQualityOmopId[!highQualityOmopId %in% abstract_id]
source('ohdsiConnection.R')
con = ohdsiConnection()
conceptAncestor = tbl(con,'concept_ancestor')
conceptAncestorHighQuality = conceptAncestor %>%
filter(ancestor_concept_id %in% highQualityOmopId) %>%
collect()
conceptMappingAncestor = conceptMappingSum %>%
left_join(conceptAncestorHighQuality,
by = c("omop_id" = "descendant_concept_id")) %>%
filter(max_levels_of_separation < levels_of_separation) %>%
rename(mapping_score_sum_1 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id) %>%
left_join(conceptMappingSum, by = c("ancestor_concept_id" = "omop_id")) %>%
rename(mapping_score_sum_2 = scoreSum) %>%
select(omop_id, mapping_score_sum_1, ancestor_concept_id, mapping_score_sum_2) %>%
group_by(omop_id) %>%
filter((
mapping_score_sum_1 < low_count_threshold &
mapping_score_sum_2 == max(mapping_score_sum_2)
) |
(
mapping_score_sum_1 >= low_count_threshold &
omop_id == ancestor_concept_id
)
) %>%
rename(common_omop_id = ancestor_concept_id) %>%
rename(mapping_score_sum = mapping_score_sum_1) %>%
select(omop_id, mapping_score_sum, common_omop_id)
return(conceptMappingAncestor)
}
conceptMappingAncestor = conceptCluster(conceptMapping = conceptMapping)
conceptMappingAncestor %>% filter(common_omop_id=='4274025')
conceptMappingAncestor %>% filter(common_omop_id=='4274025')
conceptMappingAncestor
conceptMappingAncestor %>% filter(common_omop_id=='4274025')
dt
conceptMapping = fread(file = '../resource/concept_mapping_result_v2.txt',sep = "\t",header = F,fill = T,stringsAsFactors = F,data.table = T,nThread = 4)
colnames(conceptMapping) = c('term','mapping_term','mapping_score','omop_id')
conceptMapping
dt %>% left_join(conceptMapping,by = c("term"))
set2keyv(dt, "term")
setindexv(dt, "term")
setindexv(conceptMapping, "term")
conceptMapping
leftJoinMapping <- merge(dt,conceptMapping, all.x=TRUE)
leftJoinMapping <- dt[conceptMapping,on = 'term']
leftJoinMapping <- dt[conceptMapping,on = 'term',allow.cartesian = TRUE]
leftJoinMapping
setindexv(leftJoinMapping,"omop_id")
source("conceptClusterOmop.R")
conceptMappingAncestor = conceptCluster(conceptMapping = conceptMapping,
mapping_threshold = 0.7,
levels_of_separation = 1,
low_count_threshold = 5,
abstract_id = HighLevelConceptId)
conceptMappingAncestor
conceptMappingAncestor = as.data.table(conceptMappingAncestor)
conceptMappingAncestor
setindexv(conceptMappingAncestor, "omop_id")
conceptMapping
setindexv(conceptMappingAncestor, "omop_id")
setindexv(conceptMapping, "omop_id")
conceptMappingWithCluster <- conceptMapping[conceptMappingAncestor,on = 'omop_id',allow.cartesian = TRUE] # make sure to add allow.cartesian = TRUE
conceptMappingWithCluster = conceptMapping[conceptMappingAncestor,on = 'omop_id',allow.cartesian = TRUE] # make sure to add allow.cartesian = TRUE
conceptMappingWithCluster
setindexv(conceptMappingWithCluster, "term")
setindexv(dt, "term")
leftJoinMapping <- dt[conceptMappingWithCluster,on = 'term',allow.cartesian = TRUE] # make sure to add allow.cartesian = TRUE
leftJoinMapping
fwrite(x = knowledgeBase, file = '../resource/knowledgeBase.csv')
knowledgeBase <- dt[conceptMappingWithCluster,on = 'term',allow.cartesian = TRUE] # make sure to add allow.cartesian = TRUE
fwrite(x = knowledgeBase, file = '../resource/knowledgeBase.csv')
fwrite(x = knowledgeBase, file = '../resource/knowledgeBase.csv',nThread = 4)
shiny::runApp('~/Project/eqacts/app')

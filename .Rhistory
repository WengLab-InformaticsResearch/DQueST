return(round(value,digits = 1))
}
if(str_detect(unit,'Hour')){
return(round(value,digits = 1))
}
if(str_detect(unit,'Minute')){
value = 1.9025833333e-6 * value
return(round(value,digits = 1))
}
return(value)
}
df[,maximum_age:= ageParser(maximum_age)]
df
age = df %>% pull(maximum_age) %>% unique()
age
rm('age')
df = fread(file = "../resource/demoDf.csv",header = T,na.strings = c("N/A","","NA"),
stringsAsFactors = F,
fill = T,showProgress = T)
df[gender=='All',gender:= NA]
df[healthy_volunteers=='Accepts Healthy Volunteers',healthy_volunteers:='Yes']
df
df[,maximum_age:= ageParser(maximum_age)]
df
df = fread(file = "../resource/demoDf.csv",header = T,na.strings = c("N/A","","NA"),
stringsAsFactors = F,
fill = T,showProgress = T)
df[gender=='All',gender:= NA]
df[healthy_volunteers=='Accepts Healthy Volunteers',healthy_volunteers:='Yes']
df %>% pull(maximum_age) %>% unique()
maximum_age
age
df_tmp = df %>% mutate(maximum_age = ageParser(maximum_age))
df_tmp
as.data.table(df)
as.data.table(df_tmp)
df = fread(file = "../resource/demoDf.csv",header = T,na.strings = c("N/A","","NA"),
stringsAsFactors = F,
fill = T,showProgress = T)
df[gender=='All',gender:= NA]
df[healthy_volunteers=='Accepts Healthy Volunteers',healthy_volunteers:='Yes']
df
df[,maximum_age:= lapply(maximum_age,ageParser)]
df
df[!is.na(maximum_age),maximum_age:= lapply(maximum_age,ageParser)]
ageParser = function(age){
ageSplit = unlist(strsplit(age,split = " "))
value = as.numeric(ageSplit[1])
unit = ageSplit[2]
if(str_detect(unit,'Month')){
value = 0.0833334 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Week')){
value = 0.0191781 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Day')){
value = 0.00273973 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Hour')){
return(round(value,digits = 1))
}
if(str_detect(unit,'Minute')){
value = 1.9025833333e-6 * value
return(round(value,digits = 1))
}
return(value)
}
df[!is.na(maximum_age),maximum_age:= lapply(maximum_age,ageParser)]
df = fread(file = "../resource/demoDf.csv",header = T,na.strings = c("N/A","","NA"),
stringsAsFactors = F,
fill = T,showProgress = T)
df[gender=='All',gender:= NA]
df[healthy_volunteers=='Accepts Healthy Volunteers',healthy_volunteers:='Yes']
df %>% pull(maximum_age) %>% unique()
df[!is.na(maximum_age),maximum_age1:= lapply(maximum_age,ageParser)]
df
df[!is.na(minimum_age),minimum_age1:= lapply(minimum_age,ageParser)]
df
df[1:10,"minimum_age1"]
df[2,"minimum_age1"]
df[2,"minimum_age1"] == ""
df[2,"minimum_age1"] == NA
df[2,"minimum_age1"] == logical(0)
df[2,"minimum_age1"]
as.numeric(df[2,"minimum_age1"])
is.na(df[2,"minimum_age1"])
df[!is.na(minimum_age1)]
df[is.na(minimum_age1)]
df[minimum_age1=='']
df[is.null(minimum_age1)]
df[is.na(as.numeric(minimum_age1))]
df$maximum_age1
df
df[is.na(maximum_age),maximum_age1:=as.numeric(NA)]
df
df[is.na(minimum_age),minimum_age1:=as.numeric(NA)]
df
df$maximum_age1
unlist(df$maximum_age1)
ageParser = function(age){
if(is.na(age)){
return(as.numeric(NA))
}
ageSplit = unlist(strsplit(age,split = " "))
value = as.numeric(ageSplit[1])
unit = ageSplit[2]
if(str_detect(unit,'Month')){
value = 0.0833334 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Week')){
value = 0.0191781 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Day')){
value = 0.00273973 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Hour')){
return(round(value,digits = 1))
}
if(str_detect(unit,'Minute')){
value = 1.9025833333e-6 * value
return(round(value,digits = 1))
}
return(value)
}
df_tmp = df %>% mutate(maximum_age = ageParser(maximum_age))
df_tmp
dim(df)
colnames(df)
df
df = fread(file = "../resource/demoDf.csv",header = T,na.strings = c("N/A","","NA"),
stringsAsFactors = F,
fill = T,showProgress = T)
df[gender=='All',gender:= NA]
df[healthy_volunteers=='Accepts Healthy Volunteers',healthy_volunteers:='Yes']
#df_tmp = df %>% mutate(maximum_age = ageParser(maximum_age))
#df %>% pull(maximum_age) %>% unique()
df[!is.na(maximum_age),maximum_age1:= ulist(lapply(maximum_age,ageParser))]
df[is.na(maximum_age),maximum_age1:=as.numeric(NA)]
df[!is.na(minimum_age),minimum_age1:= ulist(lapply(minimum_age,ageParser)]
df[is.na(minimum_age),minimum_age1:=as.numeric(NA)]
df = fread(file = "../resource/demoDf.csv",header = T,na.strings = c("N/A","","NA"),
stringsAsFactors = F,
fill = T,showProgress = T)
df[gender=='All',gender:= NA]
df[healthy_volunteers=='Accepts Healthy Volunteers',healthy_volunteers:='Yes']
#df_tmp = df %>% mutate(maximum_age = ageParser(maximum_age))
#df %>% pull(maximum_age) %>% unique()
df[!is.na(maximum_age),maximum_age1:= ulist(lapply(maximum_age,ageParser))]
df[is.na(maximum_age),maximum_age1:=as.numeric(NA)]
df[!is.na(minimum_age),minimum_age1:= ulist(lapply(minimum_age,ageParser))]
df[is.na(minimum_age),minimum_age1:=as.numeric(NA)]
df = fread(file = "../resource/demoDf.csv",header = T,na.strings = c("N/A","","NA"),
stringsAsFactors = F,
fill = T,showProgress = T)
df[gender=='All',gender:= NA]
df[healthy_volunteers=='Accepts Healthy Volunteers',healthy_volunteers:='Yes']
#df_tmp = df %>% mutate(maximum_age = ageParser(maximum_age))
#df %>% pull(maximum_age) %>% unique()
df[!is.na(maximum_age),maximum_age1:= lapply(maximum_age,ageParser)]
df[is.na(maximum_age),maximum_age1:=as.numeric(NA)]
df[!is.na(minimum_age),minimum_age1:= lapply(minimum_age,ageParser)]
df[is.na(minimum_age),minimum_age1:=as.numeric(NA)]
df
key(demoDt)
demoDt = df
key(demoDt)
setkey(demoDt,nct_id)
demoDt
setkey(demoDt,gender)
demoDt
setkey(demoDt,nct_id,gender,healthy_volunteers,minimum_age,maximum_age)
save(demoDt,file = "demoDt.rda")
shiny::runApp('~/Project/eqacts/app')
runApp('~/Project/eqacts/app')
runApp('~/Project/eqacts/app')
demoDt
demoDt[is.na(healthy_volunteers) | healthy_volunteers == control]
demoDt[is.na(healthy_volunteers) | healthy_volunteers == 'Yes']
if(!is.character(t)){
stop("Term should be term")
}
runApp('~/Project/eqacts/app')
if(!is.character(term)){
stop("Term should be term")
}
runApp('~/Project/eqacts/app')
gender = "Female"
age = 1
term = 'c'
ctrl = 'Yes'
if(!ctrl %in% c("Yes","No")){
stop("Ctrl should be Yes or No")
}else{
demoDt = searchByCtrl(demoDt,ctrl)
}
demoDt
demoDt = searchByAge(demoDt,age)
demoDt
if(!gender %in% c("Male","Female")){
stop("Gender should be Male or Female")
}else{
demoDt = searchByGender(demoDt,gender)
}
demoDt
runApp('~/Project/eqacts/app')
runApp('~/Project/eqacts/app')
demoDT = initByRd(rdata = "../resource/demoDt.rda")
demoDT
runApp('~/Project/eqacts/app')
runApp('~/Project/eqacts/app')
runApp('~/Project/eqacts/app')
runApp('~/Project/eqacts/app')
runApp('~/Project/eqacts/app')
runApp('~/Project/eqacts/app')
setwd("~/Project/eqacts")
setwd("~/Project/eqacts")
setwd("~/Project/eqacts/app")
trialDt = read.csv(file = '../resource/titleDt.csv')
trialDt
trialDt$status %>% unique()
trialDt = trialDtInitByCsv(File = '../resource/titleDt.csv')
source("../model/init.R")
trialDt = trialDtInitByCsv(File = '../resource/titleDt.csv')
trialDt
trialDt = trialDtInitByCsv(File = '../resource/titleDt.csv')
trialDt
trialDt$phase %>% unique()
source("../model/init.R")
trialDt = trialDtInitByCsv(File = '../resource/titleDt.csv')
trialDt
demoDt = demoDtInitByCsv(File = "../resource/demoDf.csv")
source("../model/init.R")
demoDt = demoDtInitByCsv(File = "../resource/demoDf.csv")
demoDt
setwd("~/Project/eqacts/tools")
library(data.table)
library(dplyr)
library(stringr)
df = fread(file = "../resource/xmlParsed.csv",header = T,na.strings = c("N/A","","NA","NULL","All"),
stringsAsFactors = F,
fill = T,showProgress = T)
df[healthy_volunteers=='Accepts Healthy Volunteers',healthy_volunteers:='Yes']
#df_tmp = df %>% mutate(maximum_age = ageParser(maximum_age))
#df %>% pull(maximum_age) %>% unique()
df[!is.na(maximum_age),maximum_age1:= lapply(maximum_age,ageParser)]
df[is.na(maximum_age),maximum_age1:=as.numeric(NA)]
df[!is.na(minimum_age),minimum_age1:= lapply(minimum_age,ageParser)]
df[is.na(minimum_age),minimum_age1:=as.numeric(NA)]
df[,c("V1","city","country","state"):=NULL]
demoDt = df
setkey(demoDt,nct_id,gender,healthy_volunteers,minimum_age,maximum_age)
write.csv(x = demoDt, file = "../resource/demoDt.csv")
# save(demoDt,file = "../resource/demoDt.csv")
ageParser = function(age){
if(is.na(age)){
return(as.numeric(NA))
}
ageSplit = unlist(strsplit(age,split = " "))
value = as.numeric(ageSplit[1])
unit = ageSplit[2]
if(str_detect(unit,'Month')){
value = 0.0833334 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Week')){
value = 0.0191781 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Day')){
value = 0.00273973 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Hour')){
return(round(value,digits = 1))
}
if(str_detect(unit,'Minute')){
value = 1.9025833333e-6 * value
return(round(value,digits = 1))
}
return(value)
}
demoDt
demoDt = demoDtInitByCsv(File = "../resource/demoDf.csv")
demoDt = demoDtInitByCsv(File = "../resource/demoDt.csv")
demoDt
File = "../resource/demoDt.csv"
dt = NULL
dt = fread(file = File,sep = ",",
header = T,
na.strings = c("NA","NULL","","N/A"),
stringsAsFactors = F,
strip.white = T,
fill = T,
data.table = T)
dt
demoDt
df
library(data.table)
library(dplyr)
library(stringr)
ageParser = function(age){
if(is.na(age)){
return(as.numeric(NA))
}
ageSplit = unlist(strsplit(age,split = " "))
value = as.numeric(ageSplit[1])
unit = ageSplit[2]
if(str_detect(unit,'Month')){
value = 0.0833334 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Week')){
value = 0.0191781 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Day')){
value = 0.00273973 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Hour')){
return(round(value,digits = 1))
}
if(str_detect(unit,'Minute')){
value = 1.9025833333e-6 * value
return(round(value,digits = 1))
}
return(value)
}
df = fread(file = "../resource/xmlParsed.csv",header = T,na.strings = c("N/A","","NA","NULL","All"),
stringsAsFactors = F,
fill = T,showProgress = T)
df[healthy_volunteers=='Accepts Healthy Volunteers',healthy_volunteers:='Yes']
#df_tmp = df %>% mutate(maximum_age = ageParser(maximum_age))
#df %>% pull(maximum_age) %>% unique()
df[!is.na(maximum_age),maximum_age1:= lapply(maximum_age,ageParser)]
df[is.na(maximum_age),maximum_age1:=as.numeric(NA)]
df[!is.na(minimum_age),minimum_age1:= lapply(minimum_age,ageParser)]
df[is.na(minimum_age),minimum_age1:=as.numeric(NA)]
df[,c("V1","city","country","state"):=NULL]
demoDt = df
setkey(demoDt,nct_id,gender,healthy_volunteers,minimum_age,maximum_age)
write.csv(x = demoDt, file = "../resource/demoDt.csv")
# save(demoDt,file = "../resource/demoDt.csv")
demoDt
demoDt
write.csv(x = demoDt, file = "../resource/demoDt.csv",col.names = T)
df$maximum_age1
df = unnest(df, 'maximum_age1')
library(tidyr)
install.packages("tidyr", lib="/Users/congliu/Project/eqacts/packrat/lib-R/x86_64-apple-darwin15.6.0/3.4.3")
df = unnest(df, 'maximum_age1')
library(tidyr)
df = unnest(df, 'maximum_age1')
df
df[,maximum_age1 = unlist(maximum_age1)]
df[,maximum_age1:= unlist(maximum_age1)]
df$maximum_age1
library(data.table)
library(dplyr)
library(stringr)
library(tidyr)
ageParser = function(age){
if(is.na(age)){
return(as.numeric(NA))
}
ageSplit = unlist(strsplit(age,split = " "))
value = as.numeric(ageSplit[1])
unit = ageSplit[2]
if(str_detect(unit,'Month')){
value = 0.0833334 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Week')){
value = 0.0191781 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Day')){
value = 0.00273973 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Hour')){
return(round(value,digits = 1))
}
if(str_detect(unit,'Minute')){
value = 1.9025833333e-6 * value
return(round(value,digits = 1))
}
return(value)
}
df = fread(file = "../resource/xmlParsed.csv",header = T,na.strings = c("N/A","","NA","NULL","All"),
stringsAsFactors = F,
fill = T,showProgress = T)
df[healthy_volunteers=='Accepts Healthy Volunteers',healthy_volunteers:='Yes']
#df_tmp = df %>% mutate(maximum_age = ageParser(maximum_age))
#df %>% pull(maximum_age) %>% unique()
df[!is.na(maximum_age),maximum_age1:= unlist(lapply(maximum_age,ageParser))]
df[is.na(maximum_age),maximum_age1:=as.numeric(NA)]
df[!is.na(minimum_age),minimum_age1:= unlist(lapply(minimum_age,ageParser))]
df[is.na(minimum_age),minimum_age1:=as.numeric(NA)]
df[,c("V1","city","country","state"):=NULL]
demoDt = df
demoDt$maximum_age1
demoDt
library(data.table)
library(dplyr)
library(stringr)
library(tidyr)
ageParser = function(age){
if(is.na(age)){
return(as.numeric(NA))
}
ageSplit = unlist(strsplit(age,split = " "))
value = as.numeric(ageSplit[1])
unit = ageSplit[2]
if(str_detect(unit,'Month')){
value = 0.0833334 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Week')){
value = 0.0191781 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Day')){
value = 0.00273973 * value
return(round(value,digits = 1))
}
if(str_detect(unit,'Hour')){
return(round(value,digits = 1))
}
if(str_detect(unit,'Minute')){
value = 1.9025833333e-6 * value
return(round(value,digits = 1))
}
return(value)
}
df = fread(file = "../resource/xmlParsed.csv",header = T,na.strings = c("N/A","","NA","NULL","All"),
stringsAsFactors = F,
fill = T,showProgress = T)
df[healthy_volunteers=='Accepts Healthy Volunteers',healthy_volunteers:='Yes']
#df_tmp = df %>% mutate(maximum_age = ageParser(maximum_age))
#df %>% pull(maximum_age) %>% unique()
df[!is.na(maximum_age),maximum_age1:= unlist(lapply(maximum_age,ageParser))]
df[is.na(maximum_age),maximum_age1:=as.numeric(NA)]
df[!is.na(minimum_age),minimum_age1:= unlist(lapply(minimum_age,ageParser))]
df[is.na(minimum_age),minimum_age1:=as.numeric(NA)]
df[,c("V1","city","country","state"):=NULL]
demoDt = df
setkey(demoDt,nct_id,gender,healthy_volunteers,minimum_age,maximum_age)
write.csv(x = demoDt, file = "../resource/demoDt.csv",col.names = T)
# save(demoDt,file = "../resource/demoDt.csv")
demoDt = demoDtInitByCsv(File = "../resource/demoDt.csv")
demoDt
df
write.csv(x = demoDt, file = "../resource/demoDt.csv",col.names = T,row.names = F)
demoDt = df
setkey(demoDt,nct_id,gender,healthy_volunteers,minimum_age,maximum_age)
write.csv(x = demoDt, file = "../resource/demoDt.csv",row.names = F)
demoDt = demoDtInitByCsv(File = "../resource/demoDt.csv")
demoDt
titleDt = trialDtInitByCsv(File = '../resource/titleDt.csv')
titleDt
library(data.table)
library(dplyr)
library(stringr)
library(tidyr)
library(xml2)
library(purrr)
nct_dir = list.dirs(path="../resource/AllPublicXML/", recursive = F,full.names = T)
nct_dir
setwd("~/Project/eqacts/tools")
nct_dir = list.dirs(path="../resource/AllPublicXML/", recursive = F,full.names = T)
nct_dir
nct_dir = list.dirs(path="../resource/AllPublicXML/", recursive = F,full.names = T)
for(dir in nct_dir[1]){
xmlFiles <- list.files(path=nct_dir, pattern="*.xml", full.names=T, recursive=TRUE)
if(length(xmlFiles) != 252330){
stop("File missing")
}
xmlSet = xmlFiles
baseName = as.list(basename(xmlSet))
nct_id = baseName %>% map(str_split,pattern="\\.") %>% map_chr(c(1,1))
xmldf = map(xmlSet, read_xml) %>%
map(xml_find_all,"//address") %>%
at_depth(2, as_list) %>%
set_names(nct_id) %>%
map_df(map_df,flatten,.id = 'nct_id')
}
nct_dir = list.dirs(path="../resource/AllPublicXML/", recursive = F,full.names = T)
for(dir in nct_dir[1]){
xmlFiles <- list.files(path=nct_dir, pattern="*.xml", full.names=T, recursive=TRUE)
if(length(xmlFiles) != 252330){
stop("File missing")
}
print("Read xml FilesNames")
xmlSet = xmlFiles
baseName = as.list(basename(xmlSet))
nct_id = baseName %>% map(str_split,pattern="\\.") %>% map_chr(c(1,1))
print("Read nct_id nct id")
xmldf = map(xmlSet, read_xml) %>%
print("read_xml")
xmldf = xmldf %>% map(xml_find_all,"//address") %>%
at_depth(2, as_list) %>%
set_names(nct_id) %>%
map_df(map_df,flatten,.id = 'nct_id')
print("convert to df")
}

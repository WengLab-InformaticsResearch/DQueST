wMatrix
head(wMatrix)
idx = wMatrix %>% pull(common_omop_id) %>% unique() %>% sample(size = 1)
library(dplyr)
install.packages("dplyr", lib="/Users/congliu/Project/eqacts/packrat/lib-R/x86_64-apple-darwin15.6.0/3.4.3")
library(dplyr)
idx = wMatrix %>% pull(common_omop_id) %>% unique() %>% sample(size = 1)
idx
subWMatrix = wMatrix %>% filter(common_omop_id == idx)
subWMatrix
a = NULL
a$b = 1
a
status = subWMatrix %>% pull(status) %>% unique()
status
length(status)
is.na(status)
is.null(status)
wMatrix = initByCsv("../resource/mock_w_matrix.csv") # for test only.
idx = wMatrix %>% pull(common_omop_id) %>% unique() %>% sample(size = 1)
subWMatrix = wMatrix %>% filter(common_omop_id == idx)
subWMatrix
source("../model/init.R")
wMatrix = initByCsv("../resource/mock_w_matrix.csv") # for test only.
idx = NULL
idx = wMatrix %>% pull(common_omop_id) %>% unique() %>% sample(size = 1)
subWMatrix = wMatrix %>% filter(common_omop_id == idx)
subWMatrix
status = subWMatrix %>% pull(status) %>% unique()
status
a = c(1,2,3,4)
b = c("a1","a2")
c = switch (b,
a1 = 1,
a2 = 2
)
c = switch (b == "a1",
a1 = 1,
a2 = 2
)
c = switch (X,
a1 = 1,
a2 = 2
)
c = switch (b,
a1 = 1,
a2 = 2
)
a = NULL
is.null(a$c)
subWMatrix
questionRenderDemo = function(subWMatrix){
quesion = NULL
question$domain = "demographic"
question$name = subWMatrix %>% pull(common_omop_name) %>% unique()
question$s = paste("What is your ",question$name)
status = subWMatrix %>% pull(status) %>% unique()
if(!is.na(status)){
question$s_choice = status
question$s_numeric = FALSE
}else{
question$s_choice = NA
question$s_numeric = TRUE
}
# no temporal for demographic
return(question)
}
questionRenderCondition = function(subWMatrix){
question = NULL
question$domain = "condition"
question$name = subWMatrix %>% pull(common_omop_name) %>% unique()
question$s1 = paste("Do you have condition: ",question$name)
question$s1_choice = c("YES","NO","I AM NOT SURE")
status = subWMatrix %>% pull(status) %>% unique()
# temporal
question$s2 = paste("How long since you had the condition ?")
question$s2_numeric = TRUE
if(!is.na(status)){
question$s3_choice = c(status)
question$s3 = paste("Check your condition status")
}else{
question$s3 = NA
question$s3_choice = NA
}
# no numeric for condition
return(question)
}
questionRenderProcedure = function(subWMatrix){
question = NULL
question$domain = "procedure"
question$name = subWMatrix %>% pull(common_omop_name) %>% unique()
question$s1 = paste("Do you have procedure: ",question$name)
question$s1_choice = c("YES","NO","I AM NOT SURE")
# temporal
question$s2 = paste("If yes, how long since you had the procedure ?")
question$s2_numeric = TRUE
# no numeric and status for procedure.
return(question)
}
questionRenderMeasurement = function(subWMatrix){
question = NULL
question$domain = "measurement"
question$name = subWMatrix %>% pull(common_omop_name) %>% unique()
question$s1 = paste("Can you tell us your measurement: ",question$name)
question$s1_choice = c("YES","NO")
# numeric
question$s2 = paste("If yes, what is the value ?")
question$s2_numeric = TRUE
# no temporal and status for procedure.
return(question)
}
questionRenderObservation = function(subWMatrix){
# observation is very difficult to parse.
# therefore, do not implement.
question = NULL
question$domain = "observation"
question$name = subWMatrix %>% pull(common_omop_name) %>% unique()
return(question)
}
runApp()
questionGet = function(wMatrix,idx){
# generate questions list
question = NULL
subWMatrix = wMatrix %>% filter(common_omop_id == idx)
domain = subWMatrix %>% pull(domain) %>% unique()
question = questionGetDomain(subWMatrix,domain)
tryCatch(expr = {1},
error = function(e) e,
finally = print("generate question list"))
return(question)
}
questionGetDomain = function(subWMatrix,domain){
question = NULL
question = switch(domain,
"demographic" = questionGetDemo(subWMatrix),
"condition" = questionGetCondition(subWMatrix),
"observation" = questionGetObservation(subWMatrix),
"measurement" = questionGetMeasurement(subWMatrix),
"procedure" = questionGetProcedure(subWMatrix),
"drug" = questionGetDrug(subWMatrix))
return(question)
}
questionGetDemo = function(subWMatrix){
quesion = NULL
question$domain = "demographic"
question$name = subWMatrix %>% pull(common_omop_name) %>% unique()
question$s = paste("What is your ",question$name)
status = subWMatrix %>% pull(status) %>% unique()
if(!is.na(status)){
question$s_choice = status
question$s_numeric = FALSE
}else{
question$s_choice = NA
question$s_numeric = TRUE
}
# no temporal for demographic
return(question)
}
questionGetCondition = function(subWMatrix){
question = NULL
question$domain = "condition"
question$name = subWMatrix %>% pull(common_omop_name) %>% unique()
question$s1 = paste("Do you have condition: ",question$name)
question$s1_choice = c("YES","NO","I AM NOT SURE")
status = subWMatrix %>% pull(status) %>% unique()
# temporal
question$s2 = paste("How long since you had the condition ?")
question$s2_numeric = TRUE
if(!is.na(status)){
question$s3_choice = c(status)
question$s3 = paste("Check your condition status")
}else{
question$s3 = NA
question$s3_choice = NA
}
# no numeric for condition
return(question)
}
questionGetProcedure = function(subWMatrix){
question = NULL
question$domain = "procedure"
question$name = subWMatrix %>% pull(common_omop_name) %>% unique()
question$s1 = paste("Do you have procedure: ",question$name)
question$s1_choice = c("YES","NO","I AM NOT SURE")
# temporal
question$s2 = paste("If yes, how long since you had the procedure ?")
question$s2_numeric = TRUE
# no numeric and status for procedure.
return(question)
}
questionGetMeasurement = function(subWMatrix){
question = NULL
question$domain = "measurement"
question$name = subWMatrix %>% pull(common_omop_name) %>% unique()
question$s1 = paste("Can you tell us your measurement: ",question$name)
question$s1_choice = c("YES","NO")
# numeric
question$s2 = paste("If yes, what is the value ?")
question$s2_numeric = TRUE
# no temporal and status for procedure.
return(question)
}
questionGetDrug = function(subWMatrix){
question = NULL
question$domain = "drug"
question$name = subWMatrix %>% pull(common_omop_name) %>% unique()
question$s1 = paste("Do you have medicine: ",question$name)
question$s1_choice = c("YES","NO")
# temporal
question$s2 = paste("If yes, how long since you had the drug ?")
question$s2_numeric = TRUE
# no numeric and status for procedure.
return(question)
}
questionGetObservation = function(subWMatrix){
# observation is very difficult to parse.
# therefore, do not implement.
question = NULL
question$domain = "observation"
question$name = subWMatrix %>% pull(common_omop_name) %>% unique()
return(question)
}
questionGet(wMatrix = wMatrix,idx = idx)
question = questionGet(wMatrix = wMatrix,idx = idx)
question
a = NULL
a$c
is.na(a$c)
is.na(a$c) == TRUE
runApp()
runApp()
a = tbl(a = c(NA,NA),b = c(NA,NA))
a = tbl(data.frame(a = c(NA,NA),b = c(NA,NA)))
df = data.frame(a = c(NA,NA),b = c(NA,NA)))
df = data.frame(a = c(NA,NA),b = c(NA,NA))
df
df %>% select()
df %>% select(!is.na(a)) %>% pull(a)
df %>% select(!is.na(a))
df
df %>% filter(!is.na(a))
df %>% filter(!is.na(a)) %>% pull(a)
df %>% filter(!is.na(a)) %>% pull(a) %>% unique(0)
length(df %>% filter(!is.na(a)) %>% pull(a) %>% unique(0))
runApp()
runApp()
runApp()
length(NA)
wMatrix
wMatrix[13,]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = 365
a = as.Date(a)
a = as.Date(x = a)
a
?switch
convert2day = function(time, unit) {
days = switch(
unit,
"days" = time / 1,
"weeks" = time / 7,
"months" = time / 31,
"years" = time / 365,
)
return(days)
}
convert2day(35,"a")
convert2day = function(time, unit) {
days = switch(
unit,
"days" = time / 1,
"weeks" = time / 7,
"months" = time / 31,
"years" = time / 365,
NULL
)
return(days)
}
convert2day(35,"a")
convert2day = function(time, unit) {
days = switch(
unit,
"days" = time / 1,
"weeks" = time / 7,
"months" = time / 31,
"years" = time / 365,
NULL
)
return(days)
}
a = NULL
convert2day(a$c,a$b)
convert2day(365,a$b)
convert2day = function(time, unit) {
days = switch(
unit,
"days" = time / 1,
"weeks" = time / 7,
"months" = time / 31,
"years" = time / 365,
NULL
)
return(days)
}
convert2day(365,"days")
convert2day(365,"years")
NULL & TRUE
set(c(1,2,3),c(2,3,4))
union(c(1,2,3),c(2,3,4))
union(c(1,2,3),c(2,3,4),c(2,3,4,5))
runApp()
runApp()
runApp()
runApp()
runApp()
removeTrialsDrug = removeTrialsProcedure
runApp()
"female" %in% NULL
# age
trialsRemoved = relatedTrialsWMatrix %>%
filter((
value_min < answer$value &
value_max > answer$value &
ie_flag == 0
) |
((value_min > answer$value |
value_max < answer$value) & ie_flag == 1
)) %>%
pull(nct_id) %>% unique()
if (!is.null(answer$status)) {
# not age.
trialsRemoved = relatedTrialsWMatrix %>%
filter((!status %in% answer$status &
ie_flag == 1) |
(status %in% answer$status & ie_flag == 0)) %>%
pull(nct_id) %>% unique()
} else{
# age
trialsRemoved = relatedTrialsWMatrix %>%
filter((
value_min < answer$value &
value_max > answer$value &
ie_flag == 0
) |
((value_min > answer$value |
value_max < answer$value) & ie_flag == 1
)) %>%
pull(nct_id) %>% unique()
}
return(trialsRemoved)
runApp()
runApp()
runApp()
runApp()
runApp()
print(speed)
runApp()
trialsRemoved = removeTrialsByDomain(relatedTrialsWMatrix, domain, answer, speed)
runApp()
runApp()
runApp()
runApp()
wMatrix
common_concept_id = 4344890
answer$exist = "YES"
answer = NULL
answer$exist = "YES"
speed = TRUE
wMatrix_new = wMatrix
relatedTrialsWMatrix = wMatrix_new %>% filter(common_omop_id == common_concept_id)
relatedTrialsWMatrix
!is.null(answer)
domain = relatedTrialsWMatrix %>%
pull(domain) %>% unique()
domain
trialsRemoved = removeTrialsByDomain(relatedTrialsWMatrix, domain, answer, speed)
relatedTrialsWMatrix
is.null(answer$time)
removeTrialsProcedure = function(relatedTrialsWMatrix, answer, speed) {
if (is.null(answer$time)) {
relatedTrialsWMatrixAdd = relatedTrialsWMatrix %>%
mutate(match = answer$exist == "YES")
} else{
relatedTrialsWMatrixAdd = relatedTrialsWMatrix %>%
mutate(
match = (
answer$exist == "YES" &
temporal_min < answer$time & temporal_max > answer$time
)
)
}
trialsRemoved = removeTrial(relatedTrialsWMatrixAdd, speed)
return(trialsRemoved)
}
trialsRemoved = removeTrialsByDomain(relatedTrialsWMatrix, domain, answer, speed)
trialsRemoved
!is.null(answer$value)
runApp()
common_concept_id = 4344899
answer = NULL
answer$exist = "YES"
speed = TRUE
wMatrix_new = wMatrix
relatedTrialsWMatrix = wMatrix_new %>% filter(common_omop_id == common_concept_id)
# only compute if patient answer the question.
if (!is.null(answer)) {
domain = relatedTrialsWMatrix %>%
pull(domain) %>% unique()
trialsRemoved = removeTrialsByDomain(relatedTrialsWMatrix, domain, answer, speed)
}
trialsRemoved
wMatrix_new
wMatrix_new = wMatrix_new %>% filter(!nct_id %in% trialsRemoved)
wMatrix_new
wMatrix_new = wMatrix_new %>% filter(common_omop_id != common_concept_id)
wMatrix_new
runApp()
runApp()
print(wMatrix_new)
runApp()
runApp()
runApp()
answer$exist
relatedTrialsWMatrix
relatedTrialsWMatrix %>%
mutate(match = (answer$exist == "YES"))
runApp()
runApp()
print
runApp()
runApp()
wMatrix = initByCsv("../resource/mock_w_matrix.csv") # for test only.
wMatrix
dt = wMatrix
colnames(dt) == c("id","nct_id","term","ie_flag",
"domain","value_min","value_max",
"status","temporal_min","temporal_max",
"omop_id","omop_name","mapping_score",
"common_omop_id","common_omop_name")
sum(colnames(dt) == c("id","nct_id","term","ie_flag",
"domain","value_min","value_max",
"status","temporal_min","temporal_max",
"omop_id","omop_name","mapping_score",
"common_omop_id","common_omop_name"))) != 15
sum(colnames(dt) == c("id","nct_id","term","ie_flag",
"domain","value_min","value_max",
"status","temporal_min","temporal_max",
"omop_id","omop_name","mapping_score",
"common_omop_id","common_omop_name")) != 15
dim(dt)
wMatrix = initByCsv("../resource/mock_w_matrix.csv") # for test only.
wMatrix
wMatrix = initByCsv("../resource/mock_w_matrix.csv") # for test only.
wMatrix
source("../model/init.R")
wMatrix = initByCsv("../resource/mock_w_matrix.csv") # for test only.
wMatrix
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
1.80 * 20
runApp()
tryCatch(expr = {1},
error = function(e) e,
finally = print("find best concept"))
runApp()
runApp()
runApp()
(relatedTrialsWMatrix)
runApp()
runApp()
# for test only.
idx = 4344890
tryCatch(expr = {1},
error = function(e) e,
finally = print("find best concept"))
runApp()
runApp()
runApp()
wMatrix = initByCsv("../resource/mock_w_matrix.csv") # for test only.
wMatrix
File = "../resource/mock_w_matrix.csv"
dt = NULL
dt = fread(file = File,sep = ",",
header = T,
na.strings = c("NA","NULL",""),
stringsAsFactors = F,
strip.white = T,
fill = T,
data.table = T)
dt
dt = formatDt(dt)
dt
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
